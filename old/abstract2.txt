Suppose a computational simulation justifies an engineering choice on a mission-critical part. That choice gets recorded for transparency, and it can be revisited for a number of reasons: maybe a different mission wants to re-use that part; maybe there is new data that could alter that decision; maybe the part failed, and its design process needs to be investigated. In all these cases, we would need to re-execute and investigate the software simulation behind the decision.
But re-executing old computational simulations and getting the same result is no easy feat. My work discusses strategies for how to efficiently and FAIRly mothball computational experiments such that they can be re-executed faithfully decades later. It relies on digital library science, content-based addressing, build-from-source package managers, and sandboxing while minimizing user-effort and storage, compute-time, and other computational resources.
